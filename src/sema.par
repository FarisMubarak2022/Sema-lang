/~
	Sema web Styling language
~/
[*
sema.parse = function(src){
	var result;
*]

!	' |\r|\n|\t|//[^\n]*\n|/\*[^\*/]*\*/'

	'[\1569-\1641a-zA-Z\.\-]+[\1569-\1641a-zA-Z0-9_\-]*'		identifier
	'\-?[0-9\.]+[\1569-\1641a-zA-Z%]*'						measurement		[* %match = new sema.tree.measurement(%match); *]
	'(\"([^\"]|\\\")*\")|(\'([^\']|\\\')*\')'					string
	'{'
	'}'
	','
	' *#'														id_sign
	':'
	' *\.'														class_sign
	'>'
	'\+'
	'\('
	'\)'
	';|\1563'													line_terminal
	'\*'
	'!((important)|(\1605\1607\1605))'							important
	;
	
##
program			:blocks										[* result = new sema.tree.file(%1); *]
				|
				;

blocks			:blocks block								[* %% = %1;%1.push(%2); *]
				|block										[* %% = [%1]; *]
				;
				
block			:selector_list '{' properties_list  '}'		[* %% = new sema.tree.block(%1,%3); *]
				|selector_list '{'  '}'						[* %% = new sema.tree.block(%1); *]
				;

selector_list	:identifier_list							[* %% = %1.map(function(item){
																	return new sema.tree.selector(item);
																}); *]
				;
				
identifier_list :identifier_list identifier_part			[* %% = %1;%1.push(%2); *]
				|identifier_part							[* %% = [%1]; *]
				;

identifier_part :identifier '(' params_list ')'				[* %% = new sema.tree.func(%1,%3); *]
				|identifier
				|measurement
				|color
				|separator
				|'*'
				;
				
params_list 	:params_list ',' param						[* %% = %1;%1.push(%3); *]
				|param										[* %% = [%1]; *]
				;

param			: color
				| identifier
				| measurement
				| string
				;
				
color			:id_sign identifier							[* %% = '#'+%2; *]
				|id_sign measurement						[* %% = '#'+%2.render(); *]
				;
				
separator		:','|id_sign|class_sign|':'|'>'|'+';

properties_list	:properties_list property					[* %% = %1;%1.push(%2); *]
				|property									[* %% = [%1]; *]
				;

property		:identifier ':'	identifier_list	important_sign line_terminal	[* %% = new sema.tree.property(%1,%3,%4); *]
				;

important_sign	:important									[* %% = true; *]
				|											[* %% = false; *]
				;

[*
var error_offsets = new Array();
var error_lookaheads = new Array();
var error_count = 0;

/* Switching one of these variables on will enable debug facilities
	of the various parser drivers */
//#PREFIX##_dbg_withtrace = true;
//##PREFIX##_dbg_withparsetree = true;
//##PREFIX##_dbg_withstepbystep = true;

var str = arguments[0];

if( ( error_count = __##PREFIX##parse( str,
	error_offsets, error_lookaheads ) ) > 0 )
{
	for( var i = 0; i < error_count; i++ )
		result = "Parse error near \"" 
				+ str.substr( error_offsets[i] ) +
					"\", expecting \"" +
						error_lookaheads[i].join() +
							"\"";
}
	return {
		result: result,
		error_offsets: error_offsets,
		error_lookaheads: error_lookaheads,
		error_count: error_count,
	};
}
*]
